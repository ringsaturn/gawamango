name: Release Workflow

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions: read-all

jobs:
  # Generate ldflags dynamically
  args:
    runs-on: ubuntu-latest
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"

  # Build, generate provenance, verify, and release
  release:
    needs: [args]
    permissions:
      id-token: write    # For SLSA provenance
      contents: write    # For creating releases
      actions: read      # For workflow access
    runs-on: ubuntu-latest
    steps:
      # Setup Go environment
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      # Build the application
      - name: Build application
        env:
          COMMIT_DATE: ${{ needs.args.outputs.commit-date }}
          COMMIT: ${{ needs.args.outputs.commit }}
          VERSION: ${{ needs.args.outputs.version }}
          TREE_STATE: ${{ needs.args.outputs.tree-state }}
          LDFLAGS: "-s -w -X github.com/ringsaturn/gawamango/internal/proxy.Version=${{ needs.args.outputs.version }}"
        run: |
          # Make output directory
          mkdir -p dist
          
          # Build binary
          go build -ldflags "${LDFLAGS}" -o dist/gawamango ./cmd/gawamango
          
          # Create checksums
          cd dist
          sha256sum gawamango > gawamango.sha256sum
          cd ..

      # Generate SLSA provenance
      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator@v1.10.0
        with:
          artifact-path: dist/gawamango
          output-path: dist/gawamango.intoto.jsonl
          
      # Install SLSA verifier
      - name: Install SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.4.1

      # Verify the provenance
      - name: Verify provenance
        run: |
          slsa-verifier verify-artifact \
            --provenance-path dist/gawamango.intoto.jsonl \
            --artifact-path dist/gawamango \
            --source-uri "github.com/${{ github.repository }}" \
            --source-tag "${{ github.ref_name }}"
          echo "âœ… Verification successful"

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/gawamango
            dist/gawamango.sha256sum
            dist/gawamango.intoto.jsonl
          generate_release_notes: true
          name: ${{ needs.args.outputs.version }}
          body: |
            ## gawamango ${{ needs.args.outputs.version }}
            
            This release was built with [SLSA Level 3](https://slsa.dev) compliance, 
            providing verifiable build provenance.
            
            ### Verification
            To verify the binary, install the SLSA verifier:
            ```
            go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest
            ```
            
            Then verify the artifact:
            ```
            slsa-verifier verify-artifact \
              --provenance-path gawamango.intoto.jsonl \
              --artifact-path gawamango \
              --source-uri github.com/${{ github.repository }} \
              --source-tag ${{ github.ref_name }}
            ``` 