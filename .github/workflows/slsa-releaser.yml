name: SLSA Go Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions: read-all

jobs:
  # Generate ldflags dynamically.
  args:
    runs-on: ubuntu-latest
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"

  # Trusted builder using the reusable workflow.
  build:
    permissions:
      id-token: write  # For SLSA provenance
      contents: write  # For creating releases
      actions: read    # For workflow access
    needs: args
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0
    with:
      go-version: '1.24'
      config-file: .slsa-goreleaser.yml
      evaluated-envs: |
        COMMIT_DATE: ${{ needs.args.outputs.commit-date }}
        COMMIT: ${{ needs.args.outputs.commit }}
        VERSION: ${{ needs.args.outputs.version }}
        TREE_STATE: ${{ needs.args.outputs.tree-state }}
        LDFLAGS: -s -w -X github.com/ringsaturn/gawamango/internal/proxy.Version=${{ needs.args.outputs.version }}

  # Verify and release
  verify-and-release:
    permissions:
      contents: write  # For creating releases
      actions: read    # For workflow access
    needs: [build, args]
    runs-on: ubuntu-latest
    steps:
      # Install SLSA verifier
      - name: Install SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.4.1

      # Download the artifacts and provenance
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.go-binary-name }}
          path: artifacts
      
      - name: Download provenance
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.go-provenance-name }}
          path: artifacts

      # Verify the provenance
      - name: Verify provenance
        run: |
          for binary in artifacts/*; do
            if [[ -f "$binary" && ! "$binary" =~ \.intoto\.jsonl$ ]]; then
              echo "Verifying: $binary"
              slsa-verifier verify-artifact \
                --provenance-path "${binary}.intoto.jsonl" \
                --artifact-path "$binary" \
                --source-uri "github.com/${{ github.repository }}" \
                --source-tag "${{ github.ref_name }}"
            fi
          done

      # Create GitHub release and upload assets
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          generate_release_notes: true
          name: ${{ needs.args.outputs.version }}
          body: |
            ## gawamango ${{ needs.args.outputs.version }}
            
            This release was built with [SLSA Level 3](https://slsa.dev) compliance, 
            providing verifiable build provenance.
            
            ### Verification
            To verify the binaries, install the SLSA verifier:
            ```
            go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest
            ```
            
            Then verify an artifact:
            ```
            slsa-verifier verify-artifact \
              --provenance-path <file>.intoto.jsonl \
              --artifact-path <file> \
              --source-uri github.com/${{ github.repository }} \
              --source-tag ${{ github.ref_name }}
            ```
