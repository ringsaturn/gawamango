name: SLSA Go Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions: read-all

jobs:
  # Generate ldflags dynamically.
  args:
    runs-on: ubuntu-latest
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"

  # SLSA builder - build only Linux AMD64
  build:
    needs: args
    permissions:
      id-token: write  # For SLSA provenance
      contents: write  # For creating releases
      actions: read    # For workflow access
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v2.1.0
    with:
      go-version: '1.24'
      # Config for Linux AMD64 only
      config-file: |
        {
          "version": 1,
          "goos": "linux",
          "goarch": "amd64",
          "env": ["CGO_ENABLED=0"],
          "binary": "gawamango",
          "dir": ".",
          "main": "./cmd/gawamango/main.go",
          "ldflags": ["${{ needs.args.outputs.ldflags }}"],
          "flags": ["-trimpath"]
        }
      evaluated-envs: |
        COMMIT_DATE: ${{ needs.args.outputs.commit-date }}
        COMMIT: ${{ needs.args.outputs.commit }}
        VERSION: ${{ needs.args.outputs.version }}
        TREE_STATE: ${{ needs.args.outputs.tree-state }}
        LDFLAGS: -s -w -X github.com/ringsaturn/gawamango/internal/proxy.Version=${{ needs.args.outputs.version }}

  # Verify and release
  verify-and-release:
    permissions:
      contents: write  # For creating releases
      actions: read    # For workflow access
    needs: [build, args]
    runs-on: ubuntu-latest
    steps:
      # Install SLSA verifier
      - name: Install SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.4.1

      # Download artifacts
      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.go-binary-name }}
          path: artifacts
      
      - name: Download provenance
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.go-provenance-name }}
          path: artifacts
      
      # List files for debugging purposes
      - name: List downloaded files
        run: find artifacts -type f | sort
      
      # Verify the provenance
      - name: Verify provenance
        run: |
          binary=$(find artifacts -type f -not -name "*.intoto.jsonl" | head -1)
          provenance="${binary}.intoto.jsonl"
          if [[ -f "$provenance" ]]; then
            echo "Verifying: $binary"
            slsa-verifier verify-artifact \
              --provenance-path "$provenance" \
              --artifact-path "$binary" \
              --source-uri "github.com/${{ github.repository }}" \
              --source-tag "${{ github.ref_name }}"
            echo "✅ Verification successful"
          else
            echo "⚠️ No provenance file found for $binary"
            exit 1
          fi

      # Create GitHub release with verified artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          generate_release_notes: true
          name: ${{ needs.args.outputs.version }}
          body: |
            ## gawamango ${{ needs.args.outputs.version }}
            
            This release was built with [SLSA Level 3](https://slsa.dev) compliance, 
            providing verifiable build provenance for Linux AMD64.
            
            ### Verification
            To verify the binary, install the SLSA verifier:
            ```
            go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@latest
            ```
            
            Then verify the artifact:
            ```
            slsa-verifier verify-artifact \
              --provenance-path <file>.intoto.jsonl \
              --artifact-path <file> \
              --source-uri github.com/${{ github.repository }} \
              --source-tag ${{ github.ref_name }}
            ```
